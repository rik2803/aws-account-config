---
  ### Setup security account
  ###   Configure {{ security_account.name }} account
  ###     - Log bucket for security related files
  ###     - Bucket policy to allow all accounts to access the bucket
  - name: Block for security setup on the security account
    block:
      - name: Assume role for security/admin
        sts_assume_role:
          role_arn: "arn:aws:iam::{{ security_account.account_id }}:role/{{ security_account.sts_role | default('OrganizationAccountAccessRole') }}"
          role_session_name: "security-{{ security_account.name }}-{{ security_account.sts_role | default('OrganizationAccountAccessRole') }}"
        register: security_assumed_role
      - name: Create CFN template from Ansible template for the security account setup
        template:
          src: "CloudFormationTemplates/cfn-security-account-setup.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-account-setup.yml"
      - name: Create or Update the security account setup Stack
        cloudformation:
          aws_access_key: "{{ security_assumed_role.sts_creds.access_key }}"
          aws_secret_key: "{{ security_assumed_role.sts_creds.secret_key }}"
          security_token: "{{ security_assumed_role.sts_creds.session_token }}"
          stack_name: "{{ cfn_org_name }}Security"
          state: "present"
          disable_rollback: false
          template: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-account-setup.yml"

    when: security_account is defined
    tags: [ 'security', 'securityaccount' ]

### DOES NOT WORK ON ALREADY CONFIGURED ACCOUNTS - TO BE REVIEWED
#  - name: Block for guardduty setup on the security account
#    block:
#      - name: Assume role for security/admin
#        sts_assume_role:
#          role_arn: "arn:aws:iam::{{ security_account.account_id }}:role/{{ security_account.sts_role | default('OrganizationAccountAccessRole') }}"
#          role_session_name: "security-{{ security_account.name }}-{{ security_account.sts_role | default('OrganizationAccountAccessRole') }}"
#        register: security_assumed_role
#      - name: Create CFN template from Ansible template for the GuardDuty setup on the security account
#        template:
#          src: "CloudFormationTemplates/cfn-security-account-guardduty-setup.yml"
#          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-account-guardduty-setup.yml"
#      - name: Create or Update the guardduty security account setup Stack
#        cloudformation:
#          aws_access_key: "{{ security_assumed_role.sts_creds.access_key }}"
#          aws_secret_key: "{{ security_assumed_role.sts_creds.secret_key }}"
#          security_token: "{{ security_assumed_role.sts_creds.session_token }}"
#          stack_name: "{{ cfn_org_name }}GuardDuty"
#          state: "present"
#          disable_rollback: false
#          template: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-account-guardduty-setup.yml"
#
#    when: security_account is defined
#    tags: [ 'security', 'security_guardduty' ]

  ### Create CFN templates from AWS templates
  - name: Set-up credentials
    block:
      - name: Assume role for subaccounts
        sts_assume_role:
          role_arn: "arn:aws:iam::{{ item.account_id }}:role/{{ item.sts_role | default('OrganizationAccountAccessRole') }}"
          role_session_name: "{{ item.name }}-{{ item.sts_role | default('OrgAccAccRole') }}"
        register: "security_assumed_role_subaccount_single"
        when: "subaccount_limit == 'all' or item.name.startswith(subaccount_limit)"
        loop: "{{ subaccounts_and_bastion|flatten(levels=1) }}"
        loop_control:
          label: "Assumed role {{ item.name }}"

    when: security_account is defined
    tags: [ 'security', 'security_guardduty', 'security_subaccount', 'security_subaccount_service_accounts' ]

  ### This section creates a Service Account CloudFormation Stack on all accounts
  - name: "Block for Service Account security setup on the subaccounts"
    block:
      - name: "Does the organization have a required IAM config file, if yes use it"
        stat:
          path: "{{ config_basedir }}/ServiceAccountRoles/required.yml"
        register: stat_required_config

      - name: "Does the account have a ServiceAccount config file, if not use default.yml"
        stat:
          path: "{{ config_basedir }}/ServiceAccountRoles/{{ item.item.name }}.yml"
        register: stat_sa_config
        when: "subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit)"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=1) }}"
        loop_control:
          label: "Check {{ item.item.name }} for ServiceAccount config file"

      - name: "Create CFN template from Ansible template for the ServiceAccounts security setup on the subaccounts (own config file)"
        template:
          src: "{{ config_basedir }}/ServiceAccountRoles/{{ item.item.item.name }}.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.item.name }}.yml"
        loop: "{{ stat_sa_config.results|flatten(levels=1) }}"
        loop_control:
          label: "Create CFN template for ServiceAccounts security setup on {{ item.item.item.name }} (own config file)"
        when: "item.stat is defined and item.stat.exists"

      - name: "Create CFN template from Ansible template for the ServiceAccounts security setup on the subaccounts (default config file)"
        template:
          src: "{{ config_basedir }}/ServiceAccountRoles/default.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.item.name }}.yml"
        loop: "{{ stat_sa_config.results|flatten(levels=1) }}"
        loop_control:
          label: "Create CFN template for ServiceAccounts security setup on {{ item.item.item.name }} (default config file)"
        when: "item.stat is defined and not item.stat.exists"

      - name: "Create CFN template from Ansible template for the ServiceAccounts security setup on the subaccounts (required config file)"
        template:
          src: "{{ config_basedir }}/ServiceAccountRoles/required.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.name }}-required.yml"
        when: "stat_required_config.stat.exists and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=1) }}"
        loop_control:
          label: "Create CFN template for ServiceAccounts security setup on {{ item.item.name }} (required config file)"

      - name: "Concat the generated required.yml file to the SA template for the account"
        shell: |
          cat {{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.name }}-required.yml >> {{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.name }}.yml
        when: "stat_required_config.stat.exists and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=1) }}"
        loop_control:
          label: "Concat required.yml to the SA template for {{ item.item.name }}"

      - name: "Linter check of Ansible template for the ServiceAccounts security setup on the subaccounts"
        shell: |
          cfn-lint --ignore-checks={{ lint_ignore_list | default('') }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.name }}.yml"
        when: "stat_required_config.stat.exists and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=0) }}"
        loop_control:
          label: "Linter check Ansible template for ServiceAccount security setup on {{ item.item.name }}"

      ### ServiceAccounts Stack for home region (eu-central-1)
      - name: Create/Update ServiceAccounts Security CloudFormation Stack on all accounts in (home) region eu-central-1
        cloudformation:
          aws_access_key: "{{ item.sts_creds.access_key }}"
          aws_secret_key: "{{ item.sts_creds.secret_key }}"
          security_token: "{{ item.sts_creds.session_token }}"
          region: eu-central-1
          stack_name: "{{ cfn_org_name }}SecuritySubaccountServiceAccountRoles"
          state: "present"
          disable_rollback: false
          template: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.name }}.yml"
        when: "subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit)"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=0) }}"
        loop_control:
          label: "Create/Update ServiceAccounts Security CloudFormation Stack on {{ item.item.name }} in eu-central-1"
        register: async_createsecurityserviceaccountscloudformationstack
        async: 7200
        poll: 0

      ### Wait
      - name: Wait for async_createsecurityserviceaccountscloudformationstack tasks to finish
        async_status: jid={{ item.ansible_job_id }}
        register: async_createsecurityserviceaccountscloudformationstack_jobs
        until: async_createsecurityserviceaccountscloudformationstack_jobs.finished
        retries: 300
        loop: "{{ async_createsecurityserviceaccountscloudformationstack.results|default([])|flatten(levels=0) }}"
        loop_control:
          label: "Created/Updated ServiceAccounts Security CloudFormation Stack on {{ item.item.item.name }}"
        when: "subaccount_limit == 'all' or item.item.item.name.startswith(subaccount_limit)"

    when: security_account is defined and bastion_account.service_accounts is defined
    tags: [ 'security', 'security_subaccount', 'security_subaccount_service_accounts' ]


### This section creates a security CloudFormation Stack on all accounts
  - name: Block for security setup on the subaccounts
    block:
      - name: "Create CFN template from Ansible template for the AWS Config setup on the subaccounts"
        template:
          src: "CloudFormationTemplates/cfn-security-for-subaccount-aws-config.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-for-subaccount-aws-config-{{ item.item.account_id }}.yml"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=0) }}"
        loop_control:
          label: "Create CFN template for the AWS Config settup on {{ item.item.name }}"
        when: "(skip_aws_config is undefined or not skip_aws_config) and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"

      - name: Linter check for the security setup on the subaccounts
        shell: |
          cfn-lint --ignore-checks={{ lint_ignore_list | default('') }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-serviceaccounts-for-subaccount-{{ item.item.item.name }}.yml"
        loop: "{{ stat_sa_config.results|flatten(levels=1) }}"
        loop_control:
          label: "Linter check security setup on {{ item.item.item.name }}"
        when: "(skip_aws_config is undefined or not skip_aws_config) and (subaccount_limit == 'all' or item.item.item.name.startswith(subaccount_limit))"

      - name: Create CFN template from Ansible template for the IAM security setup on the subaccounts
        template:
          src: "CloudFormationTemplates/cfn-security-for-subaccount-iam.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-iam-for-subaccount-{{ item.item.account_id }}.yml"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=0) }}"
        loop_control:
          label: "Create CFN template for IAM security setup on {{ item.item.name }}"
        when: "(skip_aws_config is undefined or not skip_aws_config) and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"

      - name: Create CFN template from Ansible template for the CloudTrail security setup on the subaccounts
        template:
          src: "CloudFormationTemplates/cfn-security-for-subaccount-cloudtrail.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-cloudtrail-for-subaccount-{{ item.item.account_id }}.yml"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=0) }}"
        loop_control:
          label: "Create CFN template for CloudTrail security setup on {{ item.item.name }}"
        when: "(skip_aws_cloudtrail is undefined or not skip_aws_cloudtrail) and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"

      ### Stack for all regions in aws_local_regions
      - name: Create/Update Security CloudFormation Stack on all accounts in all regions in "{{ aws_local_regions }}"
        cloudformation:
          aws_access_key: "{{ item[0].sts_creds.access_key }}"
          aws_secret_key: "{{ item[0].sts_creds.secret_key }}"
          security_token: "{{ item[0].sts_creds.session_token }}"
          region: "{{ item[1] }}"
          stack_name: "{{ cfn_org_name }}SecuritySubaccount"
          state: "present"
          disable_rollback: false
          template: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-for-subaccount-aws-config-{{ item[0].item.account_id }}.yml"
        loop: "{{ security_assumed_role_subaccount_single.results|product(aws_local_regions)|list }}"
        loop_control:
          label: "Create/Update Security CloudFormation Stack on {{ item[0].item.name }} in {{ item[1] }}"
        register: async_createsecuritycloudformationstack
        async: 7200
        poll: 0
        when: "(skip_aws_config is undefined or not skip_aws_config) and (subaccount_limit == 'all' or item[0].item.name.startswith(subaccount_limit))"

      ### IAM Stack for home region (eu-central-1)
      - name: Create/Update IAM Security CloudFormation Stack on all accounts in (home) region eu-central-1
        cloudformation:
          aws_access_key: "{{ item.sts_creds.access_key }}"
          aws_secret_key: "{{ item.sts_creds.secret_key }}"
          security_token: "{{ item.sts_creds.session_token }}"
          region: eu-central-1
          stack_name: "{{ cfn_org_name }}SecuritySubaccountIAM"
          state: "present"
          disable_rollback: false
          template: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-iam-for-subaccount-{{ item.item.account_id }}.yml"
        when: "(skip_aws_config is undefined or not skip_aws_config) and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=0) }}"
        loop_control:
          label: "Create/Update IAM Security CloudFormtion Stack on {{ item.item.name }} in eu-central-1"
        register: async_createsecurityiamcloudformationstack
        async: 7200
        poll: 0

      ### CloudTrail Stack for home region (eu-central-1)
      - name: Create/Update CloudTrail Security CloudFormation Stack on all accounts in (home) region eu-central-1
        cloudformation:
          aws_access_key: "{{ item.sts_creds.access_key }}"
          aws_secret_key: "{{ item.sts_creds.secret_key }}"
          security_token: "{{ item.sts_creds.session_token }}"
          region: eu-central-1
          stack_name: "{{ cfn_org_name }}SecuritySubaccountCloudTrail"
          state: "present"
          disable_rollback: false
          template: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-security-cloudtrail-for-subaccount-{{ item.item.account_id }}.yml"
        when: "(skip_aws_cloudtrail is undefined or not skip_aws_cloudtrail) and (subaccount_limit == 'all' or item.item.name.startswith(subaccount_limit))"
        loop: "{{ security_assumed_role_subaccount_single.results|flatten(levels=0) }}"
        loop_control:
          label: "Create/Update CloudTrail Security CloudFormation Stack on {{ item.item.name }} in eu-central-1"
        register: async_createsecuritycloudtrailcloudformationstack
        async: 7200
        poll: 0

      ### Wait
      - name: Wait for async_createsecuritycloudformationstack tasks to finish
        async_status: jid={{ item.ansible_job_id }}
        register: async_createsecuritycloudformationstack_jobs
        until: async_createsecuritycloudformationstack_jobs.finished
        retries: 300
        loop: "{{ async_createsecuritycloudformationstack.results|default([])|flatten(levels=1) }}"
        loop_control:
          label: "Created/Updated CloudTrail Security CloudFormation Stack on {{ item.item[0].item.name }}"
        when: "(skip_aws_config is undefined or not skip_aws_config) and item.ansible_job_id is defined and (subaccount_limit == 'all' or item.item[0].item.name.startswith(subaccount_limit))"

      - name: Debug
        debug:
          var: async_createsecurityiamcloudformationstack.results

      - name: Wait for async_createsecurityiamcloudformationstack tasks to finish
        async_status: jid={{ item.ansible_job_id }}
        register: async_createsecurityiamcloudformationstack_jobs
        until: async_createsecurityiamcloudformationstack_jobs.finished
        retries: 300
        loop: "{{ async_createsecurityiamcloudformationstack.results|default([])|flatten(levels=1) }}"
        loop_control:
          label: "Created/Updated Security IAM CloudFormation stack on {{ item.item.item.name }}"
        when: "(skip_aws_config is undefined or not skip_aws_config) and item.ansible_job_id is defined and (subaccount_limit == 'all' or item.item.item.name.startswith(subaccount_limit))"

      - name: Wait for async_createsecuritycloudtrailcloudformationstack tasks to finish
        async_status: jid={{ item.ansible_job_id }}
        register: async_createsecuritycloudtrailcloudformationstack_jobs
        until: async_createsecuritycloudtrailcloudformationstack_jobs.finished
        retries: 300
        loop: "{{ async_createsecuritycloudtrailcloudformationstack.results|default([])|flatten(levels=1) }}"
        loop_control:
          label: "Created/Updated Security CloudTrail CloudFormation stack on {{ item.item.item.name }}"
        when: "(skip_aws_cloudtrail is undefined or not skip_aws_cloudtrail) and item.ansible_job_id is defined and (subaccount_limit == 'all' or item.item.item.name.startswith(subaccount_limit))"

    when: security_account is defined
    tags: [ 'security', 'security_subaccount' ]


# #### GuardDuty Stack
# ## - name: Determine the GuardDuty DetectorId for the security account, required to get member status
#  - name: Block for GuardDuty setup on the security account
#    block:
#      - name: Get GuardDuty invitation ID
#        command: >
#          aws guardduty list-invitations --query 'Invitations[*].InvitationId' --output text
#        environment:
#          AWS_ACCESS_KEY_ID: "{{ item.sts_creds.access_key }}"
#          AWS_SECRET_ACCESS_KEY: "{{ item.sts_creds.secret_key }}"
#          AWS_SESSION_TOKEN: "{{ item.sts_creds.session_token }}"
#          AWS_DEFAULT_REGION: "{{ item.region | default('eu-central-1') }}"
#        register: "guardduty_invitation_id"
#        with_items: "{{ security_assumed_role_subaccount_single.results }}"
#        async: 7200
#        poll: 0
#      - name: Wait for guardduty_invitation_id tasks to finish
#        async_status: jid={{ item.ansible_job_id }}
#        register: guardduty_invitation_id_jobs
#        until: guardduty_invitation_id_jobs.finished
#        retries: 300
#        with_items: "{{ guardduty_invitation_id.results | default([]) }}"
#
##      - debug:
##          var: "guardduty_invitation_id_jobs"
#
#      - name: Create CFN template from Ansible template for the GuardDuty setup on the subaccounts
#        template:
#          src: "CloudFormationTemplates/cfn-guardduty-for-subaccount.yml"
#          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-guardduty-for-subaccount-{{ item.item.item.item }}.yml"
#        with_items: "{{ guardduty_invitation_id_jobs.results }}"
#
#      - name: Create/Update GuardDuty CloudFormation Stack on all accounts
#        cloudformation:
#          aws_access_key: "{{ item.item.item.sts_creds.access_key }}"
#          aws_secret_key: "{{ item.item.item.sts_creds.secret_key }}"
#          security_token: "{{ item.item.item.sts_creds.session_token }}"
#          stack_name: "{{ cfn_org_name }}GuarddutySubaccount"
#          state: "present"
#          disable_rollback: false
#          template: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ organization.name }}-guardduty-for-subaccount-{{ item.item.item.item }}.yml"
#        when: "item.item.item.item != security_account.account_id"
#        with_items:
#          - "{{ guardduty_invitation_id_jobs.results }}"
#
#      - name: Accept the invitation
#        shell: |
#          if [[ {{ item.item }} -eq {{ security_account.account_id }} ]]
#          then
#            echo "INFO - Skip security account"
#            exit 0
#          fi
#          if [[ {{ item.item }} -eq {{ bastion_account.account_id }} ]]
#          then
#            echo "INFO - Skip bastion account"
#            exit 0
#          fi
#          DETECTOR_ID=$(aws guardduty list-detectors --query 'DetectorIds[*]' --output text)
#          [[ -z ${DETECTOR_ID} ]] && { echo "ERROR - No DetectorID - exiting"; exit 1; }
#          set -- $(aws guardduty get-master-account --detector-id ${DETECTOR_ID} --output text)
#          if [[ ${5} == "Enabled" ]]
#          then
#            echo "INFO - Relationship is enabled"
#            exit 0
#          else
#            INVITATION_ID=$(aws guardduty list-invitations --query 'Invitations[*].InvitationId' --output text)
#            [[ -z ${INVITATION_ID} ]] && { echo "ERROR - No InvitationID - exiting"; exit 1; }
#            aws guardduty accept-invitation --detector-id ${DETECTOR_ID} --invitation-id ${INVITATION_ID} --master-id {{ security_account.account_id }}
#          fi
#        environment:
#          AWS_ACCESS_KEY_ID: "{{ item.sts_creds.access_key }}"
#          AWS_SECRET_ACCESS_KEY: "{{ item.sts_creds.secret_key }}"
#          AWS_SESSION_TOKEN: "{{ item.sts_creds.session_token }}"
#          AWS_DEFAULT_REGION: "{{ item.region | default('eu-central-1') }}"
#        with_items: "{{ security_assumed_role_subaccount_single.results }}"
#
#    # TODO: Remove the false condition when this is ready
#    when: "security_account is defined"
#    tags: [ 'security', 'security_guardduty' ]
