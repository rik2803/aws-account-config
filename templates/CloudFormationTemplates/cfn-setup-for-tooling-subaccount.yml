AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Creates resources on the tooling account that have to be present when setting up an environment
  with the aws-cfn-gen templates.

Resources:

{% if item == 'eu-central-1' %}
{%   set bucket_name = tooling_name_prefix_env + "-s3-lambda-function-store" %}
{% else %}
{%   set bucket_name = tooling_name_prefix_env + "-s3-lambda-function-store-" + item %}
{% endif %}

{# Create global resources only once #}
{#   Create a lambda function store bucket in all regions defined in aws_local_regions #}
{#   Create a role for CRR (Cross-Region Replication) #}
{#   Setup Cross-region replication #}
{% if item == 'eu-central-1' %}
  S3CrossRegionReplicationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "S3CrossRegionReplicationPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::{{ bucket_name }}-public
              - arn:aws:s3:::{{ bucket_name }}
          - Effect: Allow
            Action:
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
              - s3:GetObjectRetention
              - s3:GetObjectLegalHold
            Resource:
              - arn:aws:s3:::{{ bucket_name }}-public/*
              - arn:aws:s3:::{{ bucket_name }}/*
          - Effect: Allow
            Action:
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
            Resource:
{%   for region in aws_local_regions %}
{%     if region != 'eu-central-1' %}
              - arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}/*
              - arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}-public/*
{%     endif %}
{%   endfor %}

  S3CrossRegionReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref S3CrossRegionReplicationPolicy
      AssumeRolePolicyDocument: >-
        {
          "Version": "2012-10-17",
          "Statement": [
            { "Sid": "",
              "Effect": "Allow",
              "Principal": { "Service": "s3.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        }

{% if tooling_account.skip_user_creation is not defined or not tooling_account.skip_user_creation %}
  S3LambdaFunctionStoreUser:
    Type: AWS::IAM::User
    DependsOn:
      - {{ cfn_tooling_name_prefix }}S3LambdaFunctionStoreFullAccessPolicy
    Properties:
      UserName: s3-lambda-function-store-user
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/{{ cfn_tooling_name_prefix }}S3LambdaFunctionStoreFullAccess'

  KeyS3LambdaFunctionStoreUser:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref S3LambdaFunctionStoreUser
{% endif %}

  {{ cfn_tooling_name_prefix }}S3LambdaFunctionStoreFullAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: {{ cfn_tooling_name_prefix }}S3LambdaFunctionStoreFullAccess
      Description: "Managed policy {{ cfn_tooling_name_prefix }}S3LambdaFunctionStoreFullAccess for {{ cfn_tooling_name_prefix }}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowFullAccessToS3LambdaFunctionStoreFullAccess
            Effect: Allow
            Action:
              - s3:*
            Resource:
{%   for region in aws_local_regions %}
{%     if region == 'eu-central-1' %}
              - arn:aws:s3:::{{ bucket_name }}
              - arn:aws:s3:::{{ bucket_name }}/*
              - arn:aws:s3:::{{ bucket_name }}-public
              - arn:aws:s3:::{{ bucket_name }}-public/*
{%     else %}
              - arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}
              - arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}/*
              - arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}-public
              - arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}-public/*
{%     endif %}
{%   endfor %}

  {{ cfn_tooling_name_prefix }}S3DeployArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: "{{ organization.name }}tooling-prd-s3-deploy-artifacts"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Suspended
      Tags:
        - Key: Application
          Value: "{{ organization.name }}tooling"
        - Key: Environment
          Value: "prd"
        - Key: Customer
          Value: "NA"

  {{ cfn_tooling_name_prefix }}CrossAccountAccessToS3DeployArtifacts:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - {{ cfn_tooling_name_prefix }}S3DeployArtifacts
    Properties:
      Bucket: !Ref {{ cfn_tooling_name_prefix }}S3DeployArtifacts
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CrossAccountAccessToS3DeployArtifacts
            Effect: Allow
            Principal:
              AWS:
{%   for account in subaccounts %}
                # Access for account {{ account.name }}
                - arn:aws:iam::{{ account.account_id }}:root
{%   endfor %}
            Action:
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectTagging
              - s3:GetObjectTagging
            Resource:
              - arn:aws:s3:::{{ organization.name }}tooling-prd-s3-deploy-artifacts
              - arn:aws:s3:::{{ organization.name }}tooling-prd-s3-deploy-artifacts/*

{% endif %}

  {{ cfn_tooling_name_prefix }}S3LambdaFunctionStore:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: "{{ bucket_name }}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 60
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
{% if item == 'XXXXeu-central-1XXXX' %}
{# Skip replication for now, because there can only be 1 destination bucket #}
{# Set replication rules in eu-central-1 #}
      ReplicationConfiguration:
        Role: !Ref S3CrossRegionReplicationRole
        Rules:
{%   for region in aws_local_regions %}
{%     if region != 'eu-central-1' %}
          - Destination:
              Bucket: "arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}"
            Prefix: ""
            Status: Enabled
          - Destination:
              Bucket: "arn:aws:s3:::{{ tooling_name_prefix_env }}-s3-lambda-function-store-{{ region }}-public"
            Prefix: ""
            Status: Enabled
{%     endif %}
{%   endfor %}
{% endif %}
      Tags:
      - Key: Application
        Value: "{{ organization.name }}tooling"
      - Key: Environment
        Value: "prd"
      - Key: Customer
        Value: "NA"

  {{ cfn_tooling_name_prefix }}S3PublicLambdaFunctionStore:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: "{{ bucket_name }}-public"
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 60
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Application
          Value: "{{ organization.name }}tooling"
        - Key: Environment
          Value: "prd"
        - Key: Customer
          Value: "NA"

  {{ cfn_tooling_name_prefix }}CrossAccountAccessToS3LambdaFunctionStore:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - {{ cfn_tooling_name_prefix }}S3LambdaFunctionStore
    Properties:
      Bucket: !Ref {{ cfn_tooling_name_prefix }}S3LambdaFunctionStore
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CrossAccountAccessToS3LambdaFunctionStore
            Effect: Allow
            Principal:
              AWS:
{% for account in subaccounts %}
                # Access for account {{ account.name }}
                - arn:aws:iam::{{ account.account_id }}:root
{% endfor %}
            Action:
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectTagging
              - s3:GetObjectTagging
            Resource:
              - arn:aws:s3:::{{ bucket_name }}
              - arn:aws:s3:::{{ bucket_name }}/*

{% if item == 'eu-central-1' %}
{%   if tooling_account.skip_user_creation is not defined or not tooling_account.skip_user_creation %}
Outputs:
  AccessKeyS3LambdaFunctionStoreUser:
    Value:
      !Ref KeyS3LambdaFunctionStoreUser
  SecretKeyS3LambdaFunctionStoreUser:
    Value: !GetAtt KeyS3LambdaFunctionStoreUser.SecretAccessKey
{%   endif %}
{% endif %}
